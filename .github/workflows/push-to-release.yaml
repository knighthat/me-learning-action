name: Push Compiled JAR To Created Release

on:
  release:
    types: [released]
    
env:
    APP_NAME: JavaToExe
    MAIN_CLASS: me.knighthat.javatoexe.JavaToExe

jobs:
  compile:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup JVM
        uses: actions/setup-java@v3.12.0
        with:
          java-version: '17'
          distribution: temurin
          cache: 'maven'

      - name: Compile To JAR File
        run: mvn -B validate package

      - name: Check Compiled File
        run: ls -lAh ./target/

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Check xmllint Version
        run: xmllint --version

      - name: Acquire App Version
        id: version
        run: echo "version=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml)" >> $GITHUB_OUTPUT

      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: compiled
          path: ./target/*.jar

  convert2deb:
    runs-on: ubuntu-latest
    needs: compile
    env:
      APP_VERSION: ${{ needs.compile.outputs.version }}

    steps:
      - name: Check version
        run: echo $APP_VERSION

      - name: Download Artifact
        uses: actions/download-artifact@v3

      - name: Setup JVM
        uses: actions/setup-java@v3.12.0
        with:
          java-version: '17'
          distribution: temurin

      - name: Convert JAR To DEB
        run: jpackage --input ./compiled --main-jar $APP_NAME-$APP_VERSION.jar --main-class $MAIN_CLASS --name $APP_NAME --app-version $APP_VERSION
        
      - name: Rename DEB File
        run: mv compiled/*.deb compiled/$APP_NAME-$APP_VERSION_amd64.deb

      - name: Upload DEB
        uses: actions/upload-artifact@v3
        with:
          name: compiled
          path: ./*.deb
          
  convert2exe:
    runs-on: windows-latest
    needs: compile
    env:
      APP_VERSION: ${{ needs.compile.outputs.version }}

    steps:
      - name: Check version
        run: echo $APP_VERSION

      - name: Download Artifact
        uses: actions/download-artifact@v3

      - name: Setup JVM
        uses: actions/setup-java@v3.12.0
        with:
          java-version: '17'
          distribution: temurin

      - name: Convert JAR To EXE
        run: jpackage --input ./compiled --main-jar $env:APP_NAME-$env:APP_VERSION.jar --main-class $env:MAIN_CLASS --name $env:APP_NAME --app-version $env:APP_VERSION

      - name: Upload EXE
        uses: actions/upload-artifact@v3
        with:
          name: compiled
          path: ./*.exe
          
  convert2dmg:
    runs-on: macos-latest
    needs: compile
    env:
      APP_VERSION: ${{ needs.compile.outputs.version }}

    steps:
      - name: Check version
        run: echo $APP_VERSION

      - name: Download Artifact
        uses: actions/download-artifact@v3

      - name: Setup JVM
        uses: actions/setup-java@v3.12.0
        with:
          java-version: '17'
          distribution: temurin

      - name: Convert JAR To DMG
        run: jpackage --input ./compiled --main-jar $APP_NAME-$APP_VERSION.jar --main-class $MAIN_CLASS --name $APP_NAME
        
      - name: Rename DMG File
        run: mv compiled/*.dmg compiled/$APP_NAME-$APP_VERSION.dmg

      - name: Upload DMG
        uses: actions/upload-artifact@v3
        with:
          name: compiled
          path: ./*.dmg

  upload:
    runs-on: ubuntu-latest
    needs: [convert2deb,convert2exe,convert2dmg]

    steps:
    
      - name: Download Artifact
        uses: actions/download-artifact@v3

      - name: Login Into Github CLI
        run: echo ${{ secrets.TEMP_TOKEN }} | gh auth login --with-token

      - name: Get Release Tag
        id: tag
        run: |
          RELEASE_URL="https://api.github.com/repos/knighthat/me-learning-action/releases/latest"
          
          curl -s -H "Authorization: token ${{ secrets.TEMP_TOKEN }}" "$RELEASE_URL" >> releases.txt
          
          echo "release_tag=$(cat releases.txt | jq -r '.tag_name')" >> $GITHUB_OUTPUT

      - name: Publish Artifacts to Release
        run: gh release upload ${{ steps.tag.outputs.release_tag }} compiled/* -R knighthat/me-learning-action
