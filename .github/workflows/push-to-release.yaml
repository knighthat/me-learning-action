name: Push Compiled JAR To Created Release

on:
  release:
    types:
      - created

jobs:
  compile:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup JVM
        uses: actions/setup-java@v3.12.0
        with:
          java-version: '17'
          distribution: temurin
          cache: 'maven'

      - name: Compile To JAR File
        run: mvn -B validate package

      - name: Check Compiled File
        run: ls -lAh ./target/

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Check xmllint Version
        run: xmllint --version

      - name: Acquire App Version
        id: version
        run: echo "version=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml)" >> $GITHUB_OUTPUT

      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: compiled
          path: ./target/*.jar

  convert2deb:
    runs-on: ubuntu-latest
    needs: compile
    env:
      APP_VERSION: ${{ needs.compile.outputs.version }}

    steps:
      - name: Check version
        run: echo $APP_VERSION

      - name: Download Artifact
        uses: actions/download-artifact@v3

      - name: Setup JVM
        uses: actions/setup-java@v3.12.0
        with:
          java-version: '17'
          distribution: temurin

      - name: Convert JAR To DEB
        run: jpackage --input ./compiled --main-jar JavaToExe-$APP_VERSION.jar --main-class me.knighthat.javatoexe.JavaToExe --name JavaToExe --app-version $APP_VERSION

      - name: Upload DEB
        uses: actions/upload-artifact@v3
        with:
          name: compiled
          path: ./*.deb

  upload:
    runs-on: ubuntu-latest
    needs: convert2deb

    steps:
    
      - name: Download Artifact
        uses: actions/download-artifact@v3

      - name: Login Into Github CLI
        run: echo ${{ secrets.TEMP_TOKEN }} | gh auth login --with-token

      - name: Get Release Tag
        id: tag
        run: |
          gh release list -L 1 -R knighthat/me-learning-action >> releases.txt
          TAG=$(grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+' releases.txt | head -n 1)
          echo "release_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Publish Artifacts to Release
        run: gh release upload ${{ steps.tag.outputs.release_tag }} ./compiled/*
